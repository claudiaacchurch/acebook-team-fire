  UpdateById: (req, res) => {
    const token = req.headers.authorization.replace("Bearer ", "")
    const {user_id: authorId}= TokenGenerator.verify(token)
    const postId = req.body.id;
    const theDate = Date.now()
    if (req.body.hasOwnProperty('id') === false){
      res.status(400).json({ message: 'id not present'});
    } else {
      if (req.body.hasOwnProperty('comments')){
        const comment = new Comment(req.body.comments.text, authorId, req.body.comments.dateTime)
        Post.updateOne({_id:postId}, {$push:{comments: comment}}, (err) => {
          if (err) {
            throw err;
          }
          const token = TokenGenerator.jsonwebtoken(req.user_id)
          res.status(201).json({ message: 'OK', token: token });
        })
      }else if(req.body.hasOwnProperty('likes')){
        Post.updateOne({_id:postId}, {likes: req.body.likes}, (err) => {
          if (err) {
            throw err;
          }
          const token = TokenGenerator.jsonwebtoken(req.user_id)
          res.status(201).json({ message: 'OK', token: token });
        })
      }else {
        res.status(400).json({ message: 'property not found'});
      }
    }
  }
};
